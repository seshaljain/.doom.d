#+TITLE: Doom Emacs Configuration
#+AUTHOR: Seshal Jain
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent

#+BEGIN_QUOTE
I‚Äôm sure I‚Äôll be tweaking it forever though, it‚Äôs almost as satisfying
as actually using it.
#+END_QUOTE

Make this file run (slightly) faster with lexical binding
#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Seshal Jain"
      user-mail-address "seshaljain11@gmail.com")
#+END_SRC

Set up =authinfo.gpg=
#+begin_src emacs-lisp :tangle yes
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

* Better Defaults
** UI
Font
#+BEGIN_SRC emacs-lisp
(setq! doom-font (font-spec :family "Iosevka Term Curly" :size 20 :weight 'semi-bold))
#+END_SRC

Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC

Fullscreen
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Prefer vertical splits
#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 120)
#+END_SRC

No icons in mode line
#+BEGIN_SRC emacs-lisp :tangle yes
(setq! doom-modeline-icon nil)
#+END_SRC

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle packages.el :results silent
:END:
Define =package!= and =use-package!= declaration in the same section

All package install directives are tangled to =packages.el= while all package configurations are tangled to =config.el=.
The trick is to set =:tangle packages.el= to this section, and specify =:tangle yes= to all config blocks. This tangles them to =config.el=, the default tangle file for this document. Ingenious ;)

This file shouldn't be byte compiled
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :init
  (setq! org-directory "~/Documents/Org")
  :config
  (setq! org-edit-src-content-indentation 0
         org-src-window-setup 'current-window
         org-log-done 'time
         org-log-done-with-time nil))
#+END_SRC

*** Org Agenda
#+begin_src emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-agenda-files (list org-directory
                                (concat org-directory "/roam")
                                (concat org-directory "/dsa")))

  ;; DSA Practice Agenda Commands - Category-based filtering
  (setq! org-agenda-custom-commands
         '(("d" . "DSA Practice by Category")
           ("da" "Array Problems" tags-todo "array"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üî¢ Array Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("ds" "String Problems" tags-todo "string"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üî§ String Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dl" "Linked List Problems" tags-todo "ll"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üîó Linked List Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dt" "Tree Problems" tags-todo "bt"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üå≤ Binary Tree Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dp" "Dynamic Programming" tags-todo "dp"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üßÆ Dynamic Programming Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dm" "Matrix Problems" tags-todo "matrix"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üìä Matrix Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dh" "Heap Problems" tags-todo "heap"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "‚õ∞Ô∏è Heap Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dg" "Greedy Problems" tags-todo "greedy"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üí∞ Greedy Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("db" "Backtracking Problems" tags-todo "backtracking"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "‚Ü©Ô∏è Backtracking Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dr" "Search & Sort Problems" tags-todo "search_sort"
            ((org-agenda-files (list (concat org-directory "/dsa")))
             (org-agenda-overriding-header "üîç Search & Sort Problems (TODO)")
             (org-agenda-todo-keyword-format "")
             (org-agenda-max-entries 5)))
           ("dx" "Mixed Daily Practice"
            ((tags-todo "array" ((org-agenda-files (list (concat org-directory "/dsa")))
                                (org-agenda-overriding-header "üî¢ Arrays")
                                (org-agenda-max-entries 3)))
             (tags-todo "string" ((org-agenda-files (list (concat org-directory "/dsa")))
                                 (org-agenda-overriding-header "üî§ Strings")
                                 (org-agenda-max-entries 3)))
             (tags-todo "ll" ((org-agenda-files (list (concat org-directory "/dsa")))
                             (org-agenda-overriding-header "üîó Linked Lists")
                             (org-agenda-max-entries 3)))
             (tags-todo "bt" ((org-agenda-files (list (concat org-directory "/dsa")))
                             (org-agenda-overriding-header "üå≤ Trees")
                             (org-agenda-max-entries 3)))
             (tags-todo "dp" ((org-agenda-files (list (concat org-directory "/dsa")))
                             (org-agenda-overriding-header "üßÆ DP")
                             (org-agenda-max-entries 3))))))))
#+end_src

*** Org Capture
Capture templates for quick notetaking
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
:config
(setq! org-capture-templates
        '(
        ("j" "Journal" plain
        (file+olp+datetree (expand-file-name "journal/journal.org" org-directory))
        "%?"
        :unnarrowed t
        :jump-to-captured t))))
#+END_SRC
*** Org Roam
#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :after org
  :config
  (setq! org-roam-directory (concat org-directory "/roam"))
  (setq! org-roam-capture-templates
                 '(("d" "default" plain "%?"
                    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
                    :unnarrowed t)
                   ("p" "DSA Practice" plain
                    "* Attempt %U\n:PROPERTIES:\n:DATE: %U\n:END:\n\n** Notes\n%?\n\n** Code\n#+begin_src cpp\n\n#+end_src\n\n"
                    :if-new (file+head "practice/${slug}.org" "#+title: Practice: ${title}\n#+roam_refs: %l\n#+filetags: :dsa:practice:\n#+startup: overview")
                    :unnarrowed t))))
#+end_src

**** DSA Practice System
#+begin_src emacs-lisp :tangle yes
(defun my/dsa-practice-capture ()
  "Capture DSA practice session from current org heading."
  (interactive)
  (when (derived-mode-p 'org-mode)
    (let* ((heading (org-get-heading t t t t))
           (id (org-id-get-create))
           (link (org-store-link nil)))
      (org-roam-capture- :keys "p"
                        :node (org-roam-node-create :title heading)
                        :props (list :immediate-finish nil)))))

(defun my/dsa-update-last-reviewed ()
  "Update the LAST_REVIEWED property of current heading."
  (interactive)
  (org-set-property "LAST_REVIEWED" (format-time-string "%Y-%m-%d"))
  (let ((attempts (or (org-entry-get nil "ATTEMPTS") "0")))
    (org-set-property "ATTEMPTS" (number-to-string (1+ (string-to-number attempts))))))

(defun my/dsa-mark-difficulty (level)
  "Mark difficulty level and schedule appropriate review interval."
  (interactive (list (completing-read "Difficulty (1=Easy, 5=Hard): "
                                     '("1" "2" "3" "4" "5"))))
  (org-set-property "DIFFICULTY" level)
  (my/dsa-update-last-reviewed)
  (org-todo "RWD"))

;; Quick DSA practice function
(defun my/dsa-practice-menu ()
  "Quick access to DSA practice categories."
  (interactive)
  (let ((choice (completing-read "Choose category: "
                                '(("Arrays" . "da")
                                  ("Strings" . "ds")
                                  ("Linked Lists" . "dl")
                                  ("Trees" . "dt")
                                  ("Dynamic Programming" . "dp")
                                  ("Matrix" . "dm")
                                  ("Heap" . "dh")
                                  ("Greedy" . "dg")
                                  ("Backtracking" . "db")
                                  ("Search & Sort" . "dr")
                                  ("Mixed Practice" . "dx")))))
    (org-agenda nil (cdr (assoc choice '(("Arrays" . "da")
                                        ("Strings" . "ds")
                                        ("Linked Lists" . "dl")
                                        ("Trees" . "dt")
                                        ("Dynamic Programming" . "dp")
                                        ("Matrix" . "dm")
                                        ("Heap" . "dh")
                                        ("Greedy" . "dg")
                                        ("Backtracking" . "db")
                                        ("Search & Sort" . "dr")
                                        ("Mixed Practice" . "dx")))))))

;; Keybindings
(map! :after org
      :map org-mode-map
      :localleader
      (:prefix ("p" . "DSA Practice")
       "p" #'my/dsa-practice-capture
       "d" #'my/dsa-mark-difficulty
       "m" #'my/dsa-practice-menu))

;; Global keybinding for quick DSA practice
(map! :leader
      (:prefix ("n" . "notes")
       "d" #'my/dsa-practice-menu))
#+end_src

*** Org Export
Syntax highlighting via =Minted=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-latex-listings 'minted
         org-latex-packages-alist '(("" "minted")
                                    ("" "xcolor"))
         org-latex-pdf-process
         '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
        #+END_SRC

LaTeX class for college assignments
#+begin_src emacs-lisp :tangle yes
(use-package! ox-latex
  :config
  (add-to-list 'org-latex-classes
               '("assignment"
                 "\\documentclass[a4paper,12pt]{report}
\\usepackage{titlesec, color}
\\definecolor{gray75}{gray}{0.75}
\\newcommand{\\hsp}{\\hspace{10pt}}
\\titleformat{\\chapter}[hang]{\\Huge\\bfseries}{\\thechapter\\hsp\\textcolor{gray75}{|}\\hsp}{0pt}{\\Huge\\bfseries}
\\setlength{\\parindent}{0pt}
\\makeatletter
\\renewcommand{\\maketitle}{
  \\begin{titlepage}
    \\begin{center}
      \\vspace*{2em}
      \\Huge \\textbf{ASSIGNMENT} \\\\
      \\vspace{4em}
      \\Huge \\textbf{\\@title} \\\\
      \\vspace{4em}
      \\Large \\textbf{\\@date} \\\\
      \\bigskip
      \\Large \\textbf{\\@author} \\\\
      \\medskip
      \\large 191112436, CSE-3 \\\\
      \\bigskip
      \\includegraphics[width=16em]{../../manit-logo.png} \\\\
      \\bigskip
      \\large Department of Computer Science \\\\
      \\large MANIT, Bhopal \\\\
    \\end{center}
  \\end{titlepage}
}
\\makeatother
\\usepackage[margin=0.7in]{geometry}
\\usepackage{inconsolata}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

Source code block formatting
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-latex-minted-options '(("breaklines" "true")
                                    ("breakanywhere" "true")
                                    ("style" "manni")
                                    ("frame" "lines"))))
#+END_SRC


** avy
Use Dvorak home row instead of Qwerty-default for avy navigation
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! avy
  :config
  (setq! avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

** company
Enable company completions in JS
#+begin_src emacs-lisp :tangle yes
(after! js2-mode
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src

** evil
Interim solution for Emacs launch error
https://github.com/doomemacs/doomemacs/issues/8203
#+begin_src emacs-lisp :tangle yes
(after! evil
  (define-key doom-leader-map (general--kbd "w") evil-window-map))
#+end_src
