#+TITLE: Doom Emacs Configuration
#+AUTHOR: Seshal Jain
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent

#+BEGIN_QUOTE
I’m sure I’ll be tweaking it forever though, it’s almost as satisfying
as actually using it.
#+END_QUOTE

Make this file run (slightly) faster with lexical binding
#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

* Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Seshal Jain"
      user-mail-address "seshaljain11@gmail.com")
#+END_SRC

Set up =authinfo.gpg=
#+begin_src emacs-lisp :tangle yes
(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil) ; default is 7200 (2h)
#+end_src

* Better Defaults
** UI
Font
#+BEGIN_SRC emacs-lisp
(setq! doom-font (font-spec :family "Iosevka Term Curly" :size 14 :weight 'semi-bold)
       doom-variable-pitch-font (font-spec :family "Inter" :size 14))
#+END_SRC

Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dracula)
#+END_SRC

Fullscreen
#+BEGIN_SRC emacs-lisp
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

Prefer vertical splits
#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 120)
#+END_SRC

No icons in mode line
#+BEGIN_SRC emacs-lisp :tangle yes
(setq! doom-modeline-icon nil)
#+END_SRC

* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle packages.el :results silent
:END:
Define =package!= and =use-package!= declaration in the same section

All package install directives are tangled to =packages.el= while all package configurations are tangled to =config.el=.
The trick is to set =:tangle packages.el= to this section, and specify =:tangle yes= to all config blocks. This tangles them to =config.el=, the default tangle file for this document. Ingenious ;)

This file shouldn't be byte compiled
#+begin_src emacs-lisp
;; -*- no-byte-compile: t; -*-
#+end_src

** org
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :init
  (setq! org-directory "~/Documents/Org")
  :config
  (setq! org-edit-src-content-indentation 0
         org-src-window-setup 'current-window
         org-log-done 'time
         org-log-done-with-time nil
         org-export-allow-bind-keywords t))

#+END_SRC

*** Org Agenda
#+begin_src emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-agenda-files (list org-directory (concat org-directory "/projects") (concat org-directory "/gtd"))))
#+end_src

*** Org Capture
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-capture-templates
         '(("c" "CP Log" entry (file+olp+datetree "~/Git/cp/cp.org")
            "**** %l\n\n#+BEGIN_SRC cpp\n%?\n#+END_SRC"
            :clock-in t)
           ("s" "Code snippet" entry (file "~/Git/cp/snippets.org")
            "* %?"
            :empty-lines-before 2)
           )))
#+END_SRC

*** Org Export
Syntax highlighting via =Minted=
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-latex-listings 'minted
         org-latex-packages-alist '(("" "minted")
                                    ("" "xcolor"))
         org-latex-pdf-process
         '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
        #+END_SRC

LaTeX class for college assignments
#+begin_src emacs-lisp :tangle yes
(use-package! ox-latex
  :config
  (add-to-list 'org-latex-classes
               '("assignment"
                 "\\documentclass[a4paper,12pt]{report}
\\renewcommand{\\chaptername}{Lab}
\\setlength{\\parindent}{0pt}
\\makeatletter
\\renewcommand{\\maketitle}{
  \\begin{titlepage}
    \\begin{center}
      \\vspace*{2em}
      \\Huge \\textbf{ASSIGNMENT} \\\\
      \\vspace{4em}
      \\Huge \\textbf{\\@title} \\\\
      \\vspace{4em}
      \\Large \\textbf{\\@date} \\\\
      \\bigskip
      \\Large \\textbf{\\@author} \\\\
      \\medskip
      \\large 191112436, CSE-3 \\\\
      \\bigskip
      \\includegraphics[width=16em]{../../manit-logo.png} \\\\
      \\bigskip
      \\large Department of Computer Science \\\\
      \\large MANIT, Bhopal \\\\
    \\end{center}
  \\end{titlepage}
}
\\makeatother
\\usepackage[margin=0.7in]{geometry}
\\usepackage{inconsolata}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

Source code block formatting
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! org
  :config
  (setq! org-latex-minted-options '(("breaklines" "true")
                                    ("breakanywhere" "true")
                                    ("style" "solarized-light")
                                    ("bgcolor" "solarized-bg"))))
#+END_SRC

*** ox-hugo
#+begin_src emacs-lisp
(package! ox-hugo)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! ox-hugo
  :after ox)
#+end_src

** COMMENT counsel
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! ivy
  :config
  (setq! ivy-height 10))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! avy
  :config
  (setq! avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s)))
#+END_SRC

** company
#+begin_src emacs-lisp :tangle yes
(after! js2-mode
  (set-company-backend! 'js2-mode 'company-tide 'company-yasnippet))
#+end_src

** yasnippets
#+BEGIN_SRC emacs-lisp
;; disable Doom's snippets
(package! doom-snippets :ignore t)

;; enable Yasnippet default snippets
(package! yasnippet-snippets)
#+END_SRC

** mu4e
#+begin_src emacs-lisp :tangle yes
(use-package! mu4e
  :config
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-maildir "~/.mail")

  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")
  (setq mu4e-use-fancy-chars nil)

  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-stream-type 'ssl))
#+end_src

** Tailwind Intellisense
#+begin_src emacs-lisp
(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! lsp-tailwindcss)
#+end_src
